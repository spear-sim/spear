#
# Copyright(c) 2022 Intel. Licensed under the MIT License <http://opensource.org/licenses/MIT>.
#

SPEAR:
  # Use this string to launch an Unreal application in different ways:
  #   - "none" connects to an already running instance, which can be either the editor or a game executable
  #   - "editor" launches the editor
  #   - "game" launches a game executable
  LAUNCH_MODE: ""

  # ENVIRONMENT_VARS are added to Python's os.environ dict when calling spear.configure_system(...). This can
  # be useful to set various graphics driver environment variables. For example, a user can set the VK_ICD_FILENAMES
  # environment variable to gain additional control over which Vulkan devices are recognized by Unreal, and
  # force Unreal to use an NVIDIA GPU. Note that setting VK_ICD_FILENAMES only has an effect on Linux. See
  # the following link for details:
  #     https://github.com/KhronosGroup/Vulkan-LoaderAndValidationLayers/blob/master/loader/LoaderAndLayerInterface.md
  ENVIRONMENT_VARS: {}

  INSTANCE:
    # If LAUNCH_MODE is "editor", specify this path to the editor executable.
    EDITOR_EXECUTABLE: ""

    # If LAUNCH_MODE is "editor", specify this path to the uproject.
    EDITOR_UPROJECT: ""

    # If LAUNCH_MODE is "editor", use this string to launch the editor in different ways:
    #   - "editor" launches the editor in its default mode
    #   - "game" launches the editor in game mode using the "-game" command-line argument
    EDITOR_LAUNCH_MODE: ""

    # If LAUNCH_MODE is "game", specify this path to the Unreal application.
    GAME_EXECUTABLE: ""

    # Command-line arguments that are passed to the Unreal application when launching. These arguments have
    # no effect if SPEAR.LAUNCH_MODE is none.
    #
    # The "log" command-line argument captures Unreal debug output that isn't captured by STDOUT and STDERR.
    # This is useful for inspecting the stack trace when an Unreal application crashes. Note that Unreal only
    # writes to this log file in Development builds. If a path is included, it will be interpreted as a
    # relative path regardless of how it is formatted, and will be interpreted as relative to the following
    # locations:
    #     - Windows: path\to\spear\cpp\unreal_projects\SpearSim\Standalone-Development\Windows\SpearSim\Saved\Logs
    #     - macOS:   ~/Library/Logs/SpearSim
    #     - Linux:   path\to\spear\cpp\unreal_projects\SpearSim\Standalone-Development/Linux/SpearSim/Saved/Logs

    COMMAND_LINE_ARGS:
      resx: 512                 # window resolution
      resy: 512                 # window resolution
      graphicsadapter: 0        # GPU ID
      windowed: null            # run in windowed mode
      nosound: null             # turn off sound
      stdout: null              # ensure log output is written to the terminal
      fullstdoutlogoutput: null # ensure log output is written to the terminal
      nologtimes: null          # don't print timestamps next to log messages twice

      # Non-exhaustive optional arguments that we sometimes find useful:
      # fileopenlog: null       # generate a log of which files are opened in which order (but causes texture loading problems on Linux)
      # log: "path/to/log.txt"  # see description above
      # renderoffscreen: null   # run in headless mode

    # Path to a temp dir for files generated by the spear Python package.
    TEMP_DIR: "tmp"

    # Name of the temp config file generated by the spear Python package, which will be created in TEMP_DIR.
    TEMP_CONFIG_FILE: "config.yaml"

    # Once a connection has been established, the client will wait for this amount of time when calling a
    # server function before throwing an exception.
    CLIENT_INTERNAL_TIMEOUT_SECONDS: 1.0

    # Print the client's functions during initialization.
    PRINT_CALL_DEBUG_INFO: False

    # Wait for this amount of time when initializing the RPC client. This is useful because it can take a bit
    # of time between when an executable is invoked on the command-line, and when an RPC connection can be
    # established.
    INITIALIZE_CLIENT_MAX_TIME_SECONDS: 120.0
    INITIALIZE_CLIENT_SLEEP_TIME_SECONDS: 1.0

    # Config options for the client
    CLIENT_FORCE_RETURN_ALIGNED_ARRAYS: False
    CLIENT_VERBOSE_RPC_CALLS: False
    CLIENT_VERBOSE_ALLOCATIONS: False
    CLIENT_VERBOSE_EXCEPTIONS: True

    #
    # When warming up the instance, we choose to warm up for a minimum amount of time and a minimum number of
    # frames as a conservative strategy to guarantee that the engine is fully initialized before we allow
    # user Python code to interact with it.
    #
    # It is useful to warm up for a minimum amount of time because it can take a bit of time between when,
    # e.g., engine_service.ping returns for the first time, and when {engine_service.begin_frame, engine_service.execute_frame,
    # engine_service.end_frame} can start executing in a normal amount of time. This is because some systems
    # are still loading during the game's first few frames. If this amount of time is set too low, then we
    # need to set CLIENT_INTERNAL_TIMEOUT_SECONDS to be overly conservative.
    #
    # Likewise, it is useful to warm up for a minumum number of frames to initialize various caches and
    # rendering features that leverage temporal coherence between frames. The number of warmup frames should
    # be at least 1 to guarantee that visual observations are always valid. If Unreal does not execute at
    # least one full frame before we try to retrieve visual observations, it is possible that Unreal will
    # return an initial visual observation of all zeros (e.g., if we attempt to get visual observations in a
    # "with instance.begin_frame()" code block, and Unreal has not yet rendered a full frame). We sometimes
    # also want to execute more than 1 warmup frame to warm up various caches and rendering features that
    # leverage temporal coherence between frames.
    #

    INSTANCE_WARM_UP_TIME_SECONDS: 5.0
    INSTANCE_WARM_UP_NUM_FRAMES: 1

    # When getting an Editor or Game reference, these parameters control how we wait for various services to
    # report that they are initialized. These parameters have no effect if the user provides explicit
    # overrides when calling instance.get_editor() or instance.get_game().

    GET_EDITOR_WAIT_MAX_TIME_SECONDS: 5.0
    GET_EDITOR_WAIT_SLEEP_TIME_SECONDS: 1.0
    GET_EDITOR_WARM_UP_TIME_SECONDS: 1.0
    GET_EDITOR_WARM_UP_NUM_FRAMES: 1

    GET_GAME_WAIT_MAX_TIME_SECONDS: 5.0
    GET_GAME_WAIT_SLEEP_TIME_SECONDS: 1.0
    GET_GAME_WARM_UP_TIME_SECONDS: 1.0
    GET_GAME_WARM_UP_NUM_FRAMES: 1

    # Sleep for this amount of time in-between checks to see if the Unreal instance has exited.
    REQUEST_EXIT_UNREAL_INSTANCE_SLEEP_TIME_SECONDS: 1.0

  # Print debug info when calling entry points.
  ENGINE_SERVICE:
    PRINT_CALL_DEBUG_INFO: False
