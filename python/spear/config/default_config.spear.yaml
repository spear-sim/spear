#
# Copyright(c) 2022 Intel. Licensed under the MIT License <http://opensource.org/licenses/MIT>.
#

SPEAR:
  # Launch Unreal application via different modes:
  # - "standalone" launches a standalone executable
  # - "editor" launches a uproject in game mode through the editor
  # - "none" connects to an already running instance, which can be either the editor or a standalone executable
  LAUNCH_MODE: ""

  # If LAUNCH_MODE is "standalone", specify this path to the Unreal application.
  STANDALONE_EXECUTABLE: ""

  # The base location of downloaded (or built) pak files. This must be specified if you are attempting to
  # load any scene other than the default scene. PAKS_DIR is expected to have a subdirectory that contains
  # the actual PAK files, whose name matches the PAKS_VERSION_TAG parameter below if it is specified, or
  # spear.__version__ if PAKS_VERSION_TAG is not specified. A PAK file must be in this subdirectory,
  # otherwise its contents will not be loadable. This design is intended to avoid issues with multiple
  # versions of PAK files living side-by-side on a user's system.
  PAKS_DIR: ""
  PAKS_VERSION_TAG: ""

  # ENVIRONMENT_VARS are added to Python's os.environ dict when calling spear.configure_system(...). This can
  # be useful to set various graphics driver environment variables. For example, a user can set the VK_ICD_FILENAMES
  # environment variable to gain additional control over which Vulkan devices are recognized by Unreal, and
  # force Unreal to use an NVIDIA GPU. Note that setting VK_ICD_FILENAMES only has an effect on Linux. See
  # the following link for details:
  #     https://github.com/KhronosGroup/Vulkan-LoaderAndValidationLayers/blob/master/loader/LoaderAndLayerInterface.md
  ENVIRONMENT_VARS: {}

  INSTANCE:
    # If LAUNCH_MODE is "editor", specify this path to the editor executable.
    EDITOR_EXECUTABLE: ""

    # If LAUNCH_MODE is "editor", specify this path to the uproject.
    UPROJECT: ""

    # Command-line arguments that are passed to the Unreal application when launching. This has no effect if
    # "launch_mode" is none.
    #
    # The "log" command-line argument captures Unreal debug output that isn't captured by STDOUT and STDERR.
    # This is useful for inspecting the stack trace when an Unreal application crashes. Note that Unreal only
    # writes to this log file in Development builds. If a path is included, it will be interpreted as a
    # relative path regardless of how it is formatted, and will be interpreted as relative to the following
    # locations:
    #     - Windows: path\to\spear\cpp\unreal_projects\SpearSim\Standalone-Development\Windows\SpearSim\Saved\Logs
    #     - macOS:   ~/Library/Logs/SpearSim
    #     - Linux:   path\to\spear\cpp\unreal_projects\SpearSim\Standalone-Development/Linux/SpearSim/Saved/Logs

    COMMAND_LINE_ARGS:
      resx: 512                 # window resolution
      resy: 512                 # window resolution
      graphicsadapter: 0        # GPU ID
      windowed: null            # run in windowed mode
      nosound: null             # turn off sound
      fileopenlog: null         # generate a log of which files are opened in which order
      stdout: null              # ensure log output is written to the terminal
      fullstdoutlogoutput: null # ensure log output is written to the terminal
      nologtimes: null          # don't print timestamps next to log messages twice

      # Non-exhaustive optional arguments that we sometimes find useful:
      # log: "path/to/log.txt"  # see description above
      # renderoffscreen: null   # run in headless mode

    # Path to a temp dir for files generated by the spear Python package.
    TEMP_DIR: "tmp"

    # Name of the temp config file generated by the spear Python package, will be created in TEMP_DIR.
    TEMP_CONFIG_FILE: "config.yaml"

    # Maximum time to wait when initializing the RPC client. This is useful because it can take a bit of time
    # between when an executable is invoked on the command-line, and when engine_service.get_world and
    # engine_service.get_frame_state can return for first time, which is when the RPC client is considered to
    # be initialized.
    INITIALIZE_RPC_CLIENT_MAX_TIME_SECONDS: 120.0

    # Sleep for this amount of time in-between attempts to initialize the RPC client.
    INITIALIZE_RPC_CLIENT_SLEEP_TIME_SECONDS: 1.0

    # The RPC client will try this number of reconnection attempts internally before returning from its
    # constructor. We set this to 1, and implement our own reconnection logic, to avoid flooding the console
    # with warning messages.
    RPC_CLIENT_INTERNAL_RECONNECT_LIMIT: 1

    # Once a connection has been established, the RPC client will wait for this amount of time when calling a
    # server function before throwing an exception.
    RPC_CLIENT_INTERNAL_TIMEOUT_SECONDS: 1.0

    # Number of seconds to sleep after launching the Unreal instance, but before attempting to execute warmup
    # frames. This is useful because it can take a bit of time between when engine_service.is_initialized
    # returns true for the first time, and when {engine_service.begin_frame, engine_service.execute_frame,
    # engine_service.end_frame} can start returning in a normal amount of time, because some systems are still
    # loading during the game's first few frames. If this amount of time is set too low, then we need to set
    # RPC_CLIENT_INTERNAL_TIMEOUT_SECONDS to be overly conservative.
    INITIALIZE_UNREAL_INSTANCE_SLEEP_TIME_SECONDS: 5.0

    # Number of warmup frames to execute after launching the Unreal instance. This is useful to warm up
    # various caches and rendering features that leverage temporal coherence between frames. This value
    # should be at least 1 to guarantee that visual observations are always valid. If we don't execute at
    # least 1 warmup frame, it is possible that Unreal will return an initial visual observation of all zeros
    # (e.g., if we attempt to get visual observations in a "with begin_frame()" code block, and we have not
    # yet rendered a frame). We sometimes also want to execute more than 1 warmup frame to warm up various
    # caches and rendering features that leverage temporal coherence between frames.
    INITIALIZE_UNREAL_INSTANCE_NUM_WARMUP_FRAMES: 1

    # Sleep for this amount of time in-between checks to see if the Unreal instance has closed.
    REQUEST_CLOSE_UNREAL_INSTANCE_SLEEP_TIME_SECONDS: 1.0

  # Print debug info when calling entry points.
  ENGINE_SERVICE:
    PRINT_CALL_DEBUG_INFO: False

  ENV:
    # The maximum number of ticks to execute during Env.reset() before giving up. This is useful in
    # situations where the physics simulation does not successfully settle down after calling Env.reset().
    MAX_NUM_FRAMES_AFTER_RESET: 10
